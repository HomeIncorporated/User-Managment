/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IMarkupPlansClient {
    create(command: CreateMarkupPlanCommand): Observable<FileResponse>;
    update(command: UpdateMarkupPlanCommand): Observable<FileResponse>;
    delete(command: DeleteMarkupPlanCommand): Observable<FileResponse>;
}

@Injectable()
export class MarkupPlansClient implements IMarkupPlansClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreateMarkupPlanCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/MarkupPlans/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    update(command: UpdateMarkupPlanCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/MarkupPlans/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(command: DeleteMarkupPlanCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/MarkupPlans/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IPointsRedeemPlansClient {
    create(command: CreatePointsRedeemPlanCommand): Observable<FileResponse>;
    update(command: UpdatePointsRedeemPlanCommand): Observable<FileResponse>;
    delete(command: DeletePointsRedeemPlanCommand): Observable<FileResponse>;
}

@Injectable()
export class PointsRedeemPlansClient implements IPointsRedeemPlansClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreatePointsRedeemPlanCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/PointsRedeemPlans/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    update(command: UpdatePointsRedeemPlanCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/PointsRedeemPlans/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(command: DeletePointsRedeemPlanCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/PointsRedeemPlans/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IUsersClient {
    create(command: CreateUserCommand): Observable<FileResponse>;
    update(command: UpdateUserCommand): Observable<FileResponse>;
    delete(id: string): Observable<FileResponse>;
}

@Injectable()
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreateUserCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Users/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    update(command: UpdateUserCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Users/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(id: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Users/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export class RequestDetails implements IRequestDetails {
    clientReference?: string | undefined;

    constructor(data?: IRequestDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientReference = data["clientReference"];
        }
    }

    static fromJS(data: any): RequestDetails {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientReference"] = this.clientReference;
        return data; 
    }
}

export interface IRequestDetails {
    clientReference?: string | undefined;
}

export class CreateMarkupPlanCommand extends RequestDetails implements ICreateMarkupPlanCommand {
    name?: string | undefined;
    markup?: number;
    applyPoint?: boolean;
    canUseCoupon?: boolean;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    defaultMarkupPlans?: DefaultMarkupPlan[] | undefined;

    constructor(data?: ICreateMarkupPlanCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"];
            this.markup = data["markup"];
            this.applyPoint = data["applyPoint"];
            this.canUseCoupon = data["canUseCoupon"];
            if (Array.isArray(data["userMarkupPlans"])) {
                this.userMarkupPlans = [] as any;
                for (let item of data["userMarkupPlans"])
                    this.userMarkupPlans!.push(UserMarkupPlan.fromJS(item));
            }
            if (Array.isArray(data["defaultMarkupPlans"])) {
                this.defaultMarkupPlans = [] as any;
                for (let item of data["defaultMarkupPlans"])
                    this.defaultMarkupPlans!.push(DefaultMarkupPlan.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMarkupPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMarkupPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["markup"] = this.markup;
        data["applyPoint"] = this.applyPoint;
        data["canUseCoupon"] = this.canUseCoupon;
        if (Array.isArray(this.userMarkupPlans)) {
            data["userMarkupPlans"] = [];
            for (let item of this.userMarkupPlans)
                data["userMarkupPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.defaultMarkupPlans)) {
            data["defaultMarkupPlans"] = [];
            for (let item of this.defaultMarkupPlans)
                data["defaultMarkupPlans"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateMarkupPlanCommand extends IRequestDetails {
    name?: string | undefined;
    markup?: number;
    applyPoint?: boolean;
    canUseCoupon?: boolean;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    defaultMarkupPlans?: DefaultMarkupPlan[] | undefined;
}

export class EntityOfLong implements IEntityOfLong {
    id?: number;

    constructor(data?: IEntityOfLong) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityOfLong {
        data = typeof data === 'object' ? data : {};
        let result = new EntityOfLong();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityOfLong {
    id?: number;
}

export class UserMarkupPlan extends EntityOfLong implements IUserMarkupPlan {
    userId?: string;
    markupPlanId?: number;
    module?: ModuleTypes;
    user?: User | undefined;
    markupPlan?: MarkupPlan | undefined;

    constructor(data?: IUserMarkupPlan) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.userId = data["userId"];
            this.markupPlanId = data["markupPlanId"];
            this.module = data["module"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            this.markupPlan = data["markupPlan"] ? MarkupPlan.fromJS(data["markupPlan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserMarkupPlan {
        data = typeof data === 'object' ? data : {};
        let result = new UserMarkupPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["markupPlanId"] = this.markupPlanId;
        data["module"] = this.module;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["markupPlan"] = this.markupPlan ? this.markupPlan.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserMarkupPlan extends IEntityOfLong {
    userId?: string;
    markupPlanId?: number;
    module?: ModuleTypes;
    user?: User | undefined;
    markupPlan?: MarkupPlan | undefined;
}

export enum ModuleTypes {
    Hotels = 1,
    Flights = 2,
    Transportations = 3,
}

export class EntityOfGuid implements IEntityOfGuid {
    id?: string;

    constructor(data?: IEntityOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityOfGuid {
    id?: string;
}

export class User extends EntityOfGuid implements IUser {
    userName?: string | undefined;
    passwordHash?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    countryIsoCode?: string | undefined;
    image?: string | undefined;
    creationDate?: Date;
    parentUserId?: string | undefined;
    isActive?: boolean;
    externalLoginId?: string | undefined;
    securityStamp?: string | undefined;
    lockoutEnabled?: boolean;
    lockoutEndDateUtc?: Date | undefined;
    accessFailedCount?: number;
    canUseCoupon?: boolean;
    displayMarkup?: number;
    parentUser?: User | undefined;
    subUsers?: User[] | undefined;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    userCreditCards?: UserCreditCard[] | undefined;

    constructor(data?: IUser) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.userName = data["userName"];
            this.passwordHash = data["passwordHash"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
            this.emailConfirmed = data["emailConfirmed"];
            this.phoneNumber = data["phoneNumber"];
            this.phoneNumberConfirmed = data["phoneNumberConfirmed"];
            this.countryIsoCode = data["countryIsoCode"];
            this.image = data["image"];
            this.creationDate = data["creationDate"] ? new Date(data["creationDate"].toString()) : <any>undefined;
            this.parentUserId = data["parentUserId"];
            this.isActive = data["isActive"];
            this.externalLoginId = data["externalLoginId"];
            this.securityStamp = data["securityStamp"];
            this.lockoutEnabled = data["lockoutEnabled"];
            this.lockoutEndDateUtc = data["lockoutEndDateUtc"] ? new Date(data["lockoutEndDateUtc"].toString()) : <any>undefined;
            this.accessFailedCount = data["accessFailedCount"];
            this.canUseCoupon = data["canUseCoupon"];
            this.displayMarkup = data["displayMarkup"];
            this.parentUser = data["parentUser"] ? User.fromJS(data["parentUser"]) : <any>undefined;
            if (Array.isArray(data["subUsers"])) {
                this.subUsers = [] as any;
                for (let item of data["subUsers"])
                    this.subUsers!.push(User.fromJS(item));
            }
            if (Array.isArray(data["userPointsRedeemPlans"])) {
                this.userPointsRedeemPlans = [] as any;
                for (let item of data["userPointsRedeemPlans"])
                    this.userPointsRedeemPlans!.push(UserPointsRedeemPlan.fromJS(item));
            }
            if (Array.isArray(data["userMarkupPlans"])) {
                this.userMarkupPlans = [] as any;
                for (let item of data["userMarkupPlans"])
                    this.userMarkupPlans!.push(UserMarkupPlan.fromJS(item));
            }
            if (Array.isArray(data["userCreditCards"])) {
                this.userCreditCards = [] as any;
                for (let item of data["userCreditCards"])
                    this.userCreditCards!.push(UserCreditCard.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["passwordHash"] = this.passwordHash;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["countryIsoCode"] = this.countryIsoCode;
        data["image"] = this.image;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        data["parentUserId"] = this.parentUserId;
        data["isActive"] = this.isActive;
        data["externalLoginId"] = this.externalLoginId;
        data["securityStamp"] = this.securityStamp;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["lockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : <any>undefined;
        data["accessFailedCount"] = this.accessFailedCount;
        data["canUseCoupon"] = this.canUseCoupon;
        data["displayMarkup"] = this.displayMarkup;
        data["parentUser"] = this.parentUser ? this.parentUser.toJSON() : <any>undefined;
        if (Array.isArray(this.subUsers)) {
            data["subUsers"] = [];
            for (let item of this.subUsers)
                data["subUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.userPointsRedeemPlans)) {
            data["userPointsRedeemPlans"] = [];
            for (let item of this.userPointsRedeemPlans)
                data["userPointsRedeemPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.userMarkupPlans)) {
            data["userMarkupPlans"] = [];
            for (let item of this.userMarkupPlans)
                data["userMarkupPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.userCreditCards)) {
            data["userCreditCards"] = [];
            for (let item of this.userCreditCards)
                data["userCreditCards"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUser extends IEntityOfGuid {
    userName?: string | undefined;
    passwordHash?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    countryIsoCode?: string | undefined;
    image?: string | undefined;
    creationDate?: Date;
    parentUserId?: string | undefined;
    isActive?: boolean;
    externalLoginId?: string | undefined;
    securityStamp?: string | undefined;
    lockoutEnabled?: boolean;
    lockoutEndDateUtc?: Date | undefined;
    accessFailedCount?: number;
    canUseCoupon?: boolean;
    displayMarkup?: number;
    parentUser?: User | undefined;
    subUsers?: User[] | undefined;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    userCreditCards?: UserCreditCard[] | undefined;
}

export class UserPointsRedeemPlan extends EntityOfLong implements IUserPointsRedeemPlan {
    userId?: string;
    pointsRedeemPlanId?: number;
    module?: ModuleTypes;
    user?: User | undefined;
    pointsRedeemPlan?: PointsRedeemPlan | undefined;

    constructor(data?: IUserPointsRedeemPlan) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.userId = data["userId"];
            this.pointsRedeemPlanId = data["pointsRedeemPlanId"];
            this.module = data["module"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            this.pointsRedeemPlan = data["pointsRedeemPlan"] ? PointsRedeemPlan.fromJS(data["pointsRedeemPlan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserPointsRedeemPlan {
        data = typeof data === 'object' ? data : {};
        let result = new UserPointsRedeemPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["pointsRedeemPlanId"] = this.pointsRedeemPlanId;
        data["module"] = this.module;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["pointsRedeemPlan"] = this.pointsRedeemPlan ? this.pointsRedeemPlan.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserPointsRedeemPlan extends IEntityOfLong {
    userId?: string;
    pointsRedeemPlanId?: number;
    module?: ModuleTypes;
    user?: User | undefined;
    pointsRedeemPlan?: PointsRedeemPlan | undefined;
}

export class EntityOfInteger implements IEntityOfInteger {
    id?: number;

    constructor(data?: IEntityOfInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new EntityOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityOfInteger {
    id?: number;
}

export class Entity extends EntityOfInteger implements IEntity {

    constructor(data?: IEntity) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): Entity {
        data = typeof data === 'object' ? data : {};
        let result = new Entity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IEntity extends IEntityOfInteger {
}

export class PointsRedeemPlan extends Entity implements IPointsRedeemPlan {
    points?: number;
    balance?: number;
    planDate?: Date;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    defaultPointsRedeemPlans?: DefaultPointsRedeemPlan[] | undefined;

    constructor(data?: IPointsRedeemPlan) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.points = data["points"];
            this.balance = data["balance"];
            this.planDate = data["planDate"] ? new Date(data["planDate"].toString()) : <any>undefined;
            if (Array.isArray(data["userPointsRedeemPlans"])) {
                this.userPointsRedeemPlans = [] as any;
                for (let item of data["userPointsRedeemPlans"])
                    this.userPointsRedeemPlans!.push(UserPointsRedeemPlan.fromJS(item));
            }
            if (Array.isArray(data["defaultPointsRedeemPlans"])) {
                this.defaultPointsRedeemPlans = [] as any;
                for (let item of data["defaultPointsRedeemPlans"])
                    this.defaultPointsRedeemPlans!.push(DefaultPointsRedeemPlan.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PointsRedeemPlan {
        data = typeof data === 'object' ? data : {};
        let result = new PointsRedeemPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["points"] = this.points;
        data["balance"] = this.balance;
        data["planDate"] = this.planDate ? this.planDate.toISOString() : <any>undefined;
        if (Array.isArray(this.userPointsRedeemPlans)) {
            data["userPointsRedeemPlans"] = [];
            for (let item of this.userPointsRedeemPlans)
                data["userPointsRedeemPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.defaultPointsRedeemPlans)) {
            data["defaultPointsRedeemPlans"] = [];
            for (let item of this.defaultPointsRedeemPlans)
                data["defaultPointsRedeemPlans"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IPointsRedeemPlan extends IEntity {
    points?: number;
    balance?: number;
    planDate?: Date;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    defaultPointsRedeemPlans?: DefaultPointsRedeemPlan[] | undefined;
}

export class DefaultPointsRedeemPlan extends Entity implements IDefaultPointsRedeemPlan {
    pointsRedeemPlanId?: number;
    module?: ModuleTypes;
    pointsRedeemPlan?: PointsRedeemPlan | undefined;

    constructor(data?: IDefaultPointsRedeemPlan) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.pointsRedeemPlanId = data["pointsRedeemPlanId"];
            this.module = data["module"];
            this.pointsRedeemPlan = data["pointsRedeemPlan"] ? PointsRedeemPlan.fromJS(data["pointsRedeemPlan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DefaultPointsRedeemPlan {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultPointsRedeemPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pointsRedeemPlanId"] = this.pointsRedeemPlanId;
        data["module"] = this.module;
        data["pointsRedeemPlan"] = this.pointsRedeemPlan ? this.pointsRedeemPlan.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IDefaultPointsRedeemPlan extends IEntity {
    pointsRedeemPlanId?: number;
    module?: ModuleTypes;
    pointsRedeemPlan?: PointsRedeemPlan | undefined;
}

export class UserCreditCard extends EntityOfLong implements IUserCreditCard {
    userId?: string;
    cardNumber?: string | undefined;
    cardDisplayNumber?: string | undefined;
    cardHolderName?: string | undefined;
    expiryDate?: string | undefined;
    user?: User | undefined;

    constructor(data?: IUserCreditCard) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.userId = data["userId"];
            this.cardNumber = data["cardNumber"];
            this.cardDisplayNumber = data["cardDisplayNumber"];
            this.cardHolderName = data["cardHolderName"];
            this.expiryDate = data["expiryDate"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserCreditCard {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreditCard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["cardNumber"] = this.cardNumber;
        data["cardDisplayNumber"] = this.cardDisplayNumber;
        data["cardHolderName"] = this.cardHolderName;
        data["expiryDate"] = this.expiryDate;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserCreditCard extends IEntityOfLong {
    userId?: string;
    cardNumber?: string | undefined;
    cardDisplayNumber?: string | undefined;
    cardHolderName?: string | undefined;
    expiryDate?: string | undefined;
    user?: User | undefined;
}

export class MarkupPlan extends Entity implements IMarkupPlan {
    name?: string | undefined;
    markup?: number;
    applyPoint?: boolean;
    canUseCoupon?: boolean;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    defaultMarkupPlans?: DefaultMarkupPlan[] | undefined;

    constructor(data?: IMarkupPlan) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"];
            this.markup = data["markup"];
            this.applyPoint = data["applyPoint"];
            this.canUseCoupon = data["canUseCoupon"];
            if (Array.isArray(data["userMarkupPlans"])) {
                this.userMarkupPlans = [] as any;
                for (let item of data["userMarkupPlans"])
                    this.userMarkupPlans!.push(UserMarkupPlan.fromJS(item));
            }
            if (Array.isArray(data["defaultMarkupPlans"])) {
                this.defaultMarkupPlans = [] as any;
                for (let item of data["defaultMarkupPlans"])
                    this.defaultMarkupPlans!.push(DefaultMarkupPlan.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MarkupPlan {
        data = typeof data === 'object' ? data : {};
        let result = new MarkupPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["markup"] = this.markup;
        data["applyPoint"] = this.applyPoint;
        data["canUseCoupon"] = this.canUseCoupon;
        if (Array.isArray(this.userMarkupPlans)) {
            data["userMarkupPlans"] = [];
            for (let item of this.userMarkupPlans)
                data["userMarkupPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.defaultMarkupPlans)) {
            data["defaultMarkupPlans"] = [];
            for (let item of this.defaultMarkupPlans)
                data["defaultMarkupPlans"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IMarkupPlan extends IEntity {
    name?: string | undefined;
    markup?: number;
    applyPoint?: boolean;
    canUseCoupon?: boolean;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    defaultMarkupPlans?: DefaultMarkupPlan[] | undefined;
}

export class DefaultMarkupPlan extends Entity implements IDefaultMarkupPlan {
    markupPlanId?: number;
    module?: ModuleTypes;
    markupPlan?: MarkupPlan | undefined;

    constructor(data?: IDefaultMarkupPlan) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.markupPlanId = data["markupPlanId"];
            this.module = data["module"];
            this.markupPlan = data["markupPlan"] ? MarkupPlan.fromJS(data["markupPlan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DefaultMarkupPlan {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultMarkupPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["markupPlanId"] = this.markupPlanId;
        data["module"] = this.module;
        data["markupPlan"] = this.markupPlan ? this.markupPlan.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IDefaultMarkupPlan extends IEntity {
    markupPlanId?: number;
    module?: ModuleTypes;
    markupPlan?: MarkupPlan | undefined;
}

export class UpdateMarkupPlanCommand extends RequestDetails implements IUpdateMarkupPlanCommand {
    id?: number;
    name?: string | undefined;
    markup?: number;
    applyPoint?: boolean;
    canUseCoupon?: boolean;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    defaultMarkupPlans?: DefaultMarkupPlan[] | undefined;

    constructor(data?: IUpdateMarkupPlanCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.markup = data["markup"];
            this.applyPoint = data["applyPoint"];
            this.canUseCoupon = data["canUseCoupon"];
            if (Array.isArray(data["userMarkupPlans"])) {
                this.userMarkupPlans = [] as any;
                for (let item of data["userMarkupPlans"])
                    this.userMarkupPlans!.push(UserMarkupPlan.fromJS(item));
            }
            if (Array.isArray(data["defaultMarkupPlans"])) {
                this.defaultMarkupPlans = [] as any;
                for (let item of data["defaultMarkupPlans"])
                    this.defaultMarkupPlans!.push(DefaultMarkupPlan.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateMarkupPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMarkupPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["markup"] = this.markup;
        data["applyPoint"] = this.applyPoint;
        data["canUseCoupon"] = this.canUseCoupon;
        if (Array.isArray(this.userMarkupPlans)) {
            data["userMarkupPlans"] = [];
            for (let item of this.userMarkupPlans)
                data["userMarkupPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.defaultMarkupPlans)) {
            data["defaultMarkupPlans"] = [];
            for (let item of this.defaultMarkupPlans)
                data["defaultMarkupPlans"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateMarkupPlanCommand extends IRequestDetails {
    id?: number;
    name?: string | undefined;
    markup?: number;
    applyPoint?: boolean;
    canUseCoupon?: boolean;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    defaultMarkupPlans?: DefaultMarkupPlan[] | undefined;
}

export class DeleteMarkupPlanCommand implements IDeleteMarkupPlanCommand {
    id?: number;

    constructor(data?: IDeleteMarkupPlanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DeleteMarkupPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteMarkupPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IDeleteMarkupPlanCommand {
    id?: number;
}

export class CreatePointsRedeemPlanCommand extends RequestDetails implements ICreatePointsRedeemPlanCommand {
    points?: number;
    balance?: number;
    planDate?: Date;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    defaultPointsRedeemPlans?: DefaultPointsRedeemPlan[] | undefined;

    constructor(data?: ICreatePointsRedeemPlanCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.points = data["points"];
            this.balance = data["balance"];
            this.planDate = data["planDate"] ? new Date(data["planDate"].toString()) : <any>undefined;
            if (Array.isArray(data["userPointsRedeemPlans"])) {
                this.userPointsRedeemPlans = [] as any;
                for (let item of data["userPointsRedeemPlans"])
                    this.userPointsRedeemPlans!.push(UserPointsRedeemPlan.fromJS(item));
            }
            if (Array.isArray(data["defaultPointsRedeemPlans"])) {
                this.defaultPointsRedeemPlans = [] as any;
                for (let item of data["defaultPointsRedeemPlans"])
                    this.defaultPointsRedeemPlans!.push(DefaultPointsRedeemPlan.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreatePointsRedeemPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePointsRedeemPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["points"] = this.points;
        data["balance"] = this.balance;
        data["planDate"] = this.planDate ? this.planDate.toISOString() : <any>undefined;
        if (Array.isArray(this.userPointsRedeemPlans)) {
            data["userPointsRedeemPlans"] = [];
            for (let item of this.userPointsRedeemPlans)
                data["userPointsRedeemPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.defaultPointsRedeemPlans)) {
            data["defaultPointsRedeemPlans"] = [];
            for (let item of this.defaultPointsRedeemPlans)
                data["defaultPointsRedeemPlans"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ICreatePointsRedeemPlanCommand extends IRequestDetails {
    points?: number;
    balance?: number;
    planDate?: Date;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    defaultPointsRedeemPlans?: DefaultPointsRedeemPlan[] | undefined;
}

export class UpdatePointsRedeemPlanCommand extends RequestDetails implements IUpdatePointsRedeemPlanCommand {
    id?: number;
    points?: number;
    balance?: number;
    planDate?: Date;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    defaultPointsRedeemPlans?: DefaultPointsRedeemPlan[] | undefined;

    constructor(data?: IUpdatePointsRedeemPlanCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.points = data["points"];
            this.balance = data["balance"];
            this.planDate = data["planDate"] ? new Date(data["planDate"].toString()) : <any>undefined;
            if (Array.isArray(data["userPointsRedeemPlans"])) {
                this.userPointsRedeemPlans = [] as any;
                for (let item of data["userPointsRedeemPlans"])
                    this.userPointsRedeemPlans!.push(UserPointsRedeemPlan.fromJS(item));
            }
            if (Array.isArray(data["defaultPointsRedeemPlans"])) {
                this.defaultPointsRedeemPlans = [] as any;
                for (let item of data["defaultPointsRedeemPlans"])
                    this.defaultPointsRedeemPlans!.push(DefaultPointsRedeemPlan.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdatePointsRedeemPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePointsRedeemPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["points"] = this.points;
        data["balance"] = this.balance;
        data["planDate"] = this.planDate ? this.planDate.toISOString() : <any>undefined;
        if (Array.isArray(this.userPointsRedeemPlans)) {
            data["userPointsRedeemPlans"] = [];
            for (let item of this.userPointsRedeemPlans)
                data["userPointsRedeemPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.defaultPointsRedeemPlans)) {
            data["defaultPointsRedeemPlans"] = [];
            for (let item of this.defaultPointsRedeemPlans)
                data["defaultPointsRedeemPlans"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdatePointsRedeemPlanCommand extends IRequestDetails {
    id?: number;
    points?: number;
    balance?: number;
    planDate?: Date;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    defaultPointsRedeemPlans?: DefaultPointsRedeemPlan[] | undefined;
}

export class DeletePointsRedeemPlanCommand implements IDeletePointsRedeemPlanCommand {
    id?: number;

    constructor(data?: IDeletePointsRedeemPlanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DeletePointsRedeemPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeletePointsRedeemPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IDeletePointsRedeemPlanCommand {
    id?: number;
}

export class CreateUserCommand extends RequestDetails implements ICreateUserCommand {
    id?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    passwordHash?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    countryIsoCode?: string | undefined;
    image?: string | undefined;
    parentUserId?: string;
    isActive?: boolean;
    externalLoginId?: string | undefined;
    securityStamp?: string | undefined;
    lockoutEnabled?: boolean;
    lockoutEndDateUtc?: Date | undefined;
    accessFailedCount?: number;
    canUseCoupon?: boolean;
    displayMarkup?: number;
    parentUser?: User | undefined;
    subUsers?: User[] | undefined;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    userCreditCards?: UserCreditCard[] | undefined;

    constructor(data?: ICreateUserCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.password = data["password"];
            this.passwordHash = data["passwordHash"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
            this.emailConfirmed = data["emailConfirmed"];
            this.phoneNumber = data["phoneNumber"];
            this.phoneNumberConfirmed = data["phoneNumberConfirmed"];
            this.countryIsoCode = data["countryIsoCode"];
            this.image = data["image"];
            this.parentUserId = data["parentUserId"];
            this.isActive = data["isActive"];
            this.externalLoginId = data["externalLoginId"];
            this.securityStamp = data["securityStamp"];
            this.lockoutEnabled = data["lockoutEnabled"];
            this.lockoutEndDateUtc = data["lockoutEndDateUtc"] ? new Date(data["lockoutEndDateUtc"].toString()) : <any>undefined;
            this.accessFailedCount = data["accessFailedCount"];
            this.canUseCoupon = data["canUseCoupon"];
            this.displayMarkup = data["displayMarkup"];
            this.parentUser = data["parentUser"] ? User.fromJS(data["parentUser"]) : <any>undefined;
            if (Array.isArray(data["subUsers"])) {
                this.subUsers = [] as any;
                for (let item of data["subUsers"])
                    this.subUsers!.push(User.fromJS(item));
            }
            if (Array.isArray(data["userPointsRedeemPlans"])) {
                this.userPointsRedeemPlans = [] as any;
                for (let item of data["userPointsRedeemPlans"])
                    this.userPointsRedeemPlans!.push(UserPointsRedeemPlan.fromJS(item));
            }
            if (Array.isArray(data["userMarkupPlans"])) {
                this.userMarkupPlans = [] as any;
                for (let item of data["userMarkupPlans"])
                    this.userMarkupPlans!.push(UserMarkupPlan.fromJS(item));
            }
            if (Array.isArray(data["userCreditCards"])) {
                this.userCreditCards = [] as any;
                for (let item of data["userCreditCards"])
                    this.userCreditCards!.push(UserCreditCard.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["passwordHash"] = this.passwordHash;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["countryIsoCode"] = this.countryIsoCode;
        data["image"] = this.image;
        data["parentUserId"] = this.parentUserId;
        data["isActive"] = this.isActive;
        data["externalLoginId"] = this.externalLoginId;
        data["securityStamp"] = this.securityStamp;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["lockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : <any>undefined;
        data["accessFailedCount"] = this.accessFailedCount;
        data["canUseCoupon"] = this.canUseCoupon;
        data["displayMarkup"] = this.displayMarkup;
        data["parentUser"] = this.parentUser ? this.parentUser.toJSON() : <any>undefined;
        if (Array.isArray(this.subUsers)) {
            data["subUsers"] = [];
            for (let item of this.subUsers)
                data["subUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.userPointsRedeemPlans)) {
            data["userPointsRedeemPlans"] = [];
            for (let item of this.userPointsRedeemPlans)
                data["userPointsRedeemPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.userMarkupPlans)) {
            data["userMarkupPlans"] = [];
            for (let item of this.userMarkupPlans)
                data["userMarkupPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.userCreditCards)) {
            data["userCreditCards"] = [];
            for (let item of this.userCreditCards)
                data["userCreditCards"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateUserCommand extends IRequestDetails {
    id?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    passwordHash?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    countryIsoCode?: string | undefined;
    image?: string | undefined;
    parentUserId?: string;
    isActive?: boolean;
    externalLoginId?: string | undefined;
    securityStamp?: string | undefined;
    lockoutEnabled?: boolean;
    lockoutEndDateUtc?: Date | undefined;
    accessFailedCount?: number;
    canUseCoupon?: boolean;
    displayMarkup?: number;
    parentUser?: User | undefined;
    subUsers?: User[] | undefined;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    userCreditCards?: UserCreditCard[] | undefined;
}

export class UpdateUserCommand extends RequestDetails implements IUpdateUserCommand {
    id?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    passwordHash?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    countryIsoCode?: string | undefined;
    image?: string | undefined;
    parentUserId?: string;
    isActive?: boolean;
    externalLoginId?: string | undefined;
    securityStamp?: string | undefined;
    lockoutEnabled?: boolean;
    lockoutEndDateUtc?: Date | undefined;
    accessFailedCount?: number;
    canUseCoupon?: boolean;
    displayMarkup?: number;
    parentUser?: User | undefined;
    subUsers?: User[] | undefined;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    userCreditCards?: UserCreditCard[] | undefined;

    constructor(data?: IUpdateUserCommand) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.password = data["password"];
            this.passwordHash = data["passwordHash"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.email = data["email"];
            this.emailConfirmed = data["emailConfirmed"];
            this.phoneNumber = data["phoneNumber"];
            this.phoneNumberConfirmed = data["phoneNumberConfirmed"];
            this.countryIsoCode = data["countryIsoCode"];
            this.image = data["image"];
            this.parentUserId = data["parentUserId"];
            this.isActive = data["isActive"];
            this.externalLoginId = data["externalLoginId"];
            this.securityStamp = data["securityStamp"];
            this.lockoutEnabled = data["lockoutEnabled"];
            this.lockoutEndDateUtc = data["lockoutEndDateUtc"] ? new Date(data["lockoutEndDateUtc"].toString()) : <any>undefined;
            this.accessFailedCount = data["accessFailedCount"];
            this.canUseCoupon = data["canUseCoupon"];
            this.displayMarkup = data["displayMarkup"];
            this.parentUser = data["parentUser"] ? User.fromJS(data["parentUser"]) : <any>undefined;
            if (Array.isArray(data["subUsers"])) {
                this.subUsers = [] as any;
                for (let item of data["subUsers"])
                    this.subUsers!.push(User.fromJS(item));
            }
            if (Array.isArray(data["userPointsRedeemPlans"])) {
                this.userPointsRedeemPlans = [] as any;
                for (let item of data["userPointsRedeemPlans"])
                    this.userPointsRedeemPlans!.push(UserPointsRedeemPlan.fromJS(item));
            }
            if (Array.isArray(data["userMarkupPlans"])) {
                this.userMarkupPlans = [] as any;
                for (let item of data["userMarkupPlans"])
                    this.userMarkupPlans!.push(UserMarkupPlan.fromJS(item));
            }
            if (Array.isArray(data["userCreditCards"])) {
                this.userCreditCards = [] as any;
                for (let item of data["userCreditCards"])
                    this.userCreditCards!.push(UserCreditCard.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["passwordHash"] = this.passwordHash;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["countryIsoCode"] = this.countryIsoCode;
        data["image"] = this.image;
        data["parentUserId"] = this.parentUserId;
        data["isActive"] = this.isActive;
        data["externalLoginId"] = this.externalLoginId;
        data["securityStamp"] = this.securityStamp;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["lockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : <any>undefined;
        data["accessFailedCount"] = this.accessFailedCount;
        data["canUseCoupon"] = this.canUseCoupon;
        data["displayMarkup"] = this.displayMarkup;
        data["parentUser"] = this.parentUser ? this.parentUser.toJSON() : <any>undefined;
        if (Array.isArray(this.subUsers)) {
            data["subUsers"] = [];
            for (let item of this.subUsers)
                data["subUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.userPointsRedeemPlans)) {
            data["userPointsRedeemPlans"] = [];
            for (let item of this.userPointsRedeemPlans)
                data["userPointsRedeemPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.userMarkupPlans)) {
            data["userMarkupPlans"] = [];
            for (let item of this.userMarkupPlans)
                data["userMarkupPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.userCreditCards)) {
            data["userCreditCards"] = [];
            for (let item of this.userCreditCards)
                data["userCreditCards"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateUserCommand extends IRequestDetails {
    id?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    passwordHash?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    countryIsoCode?: string | undefined;
    image?: string | undefined;
    parentUserId?: string;
    isActive?: boolean;
    externalLoginId?: string | undefined;
    securityStamp?: string | undefined;
    lockoutEnabled?: boolean;
    lockoutEndDateUtc?: Date | undefined;
    accessFailedCount?: number;
    canUseCoupon?: boolean;
    displayMarkup?: number;
    parentUser?: User | undefined;
    subUsers?: User[] | undefined;
    userPointsRedeemPlans?: UserPointsRedeemPlan[] | undefined;
    userMarkupPlans?: UserMarkupPlan[] | undefined;
    userCreditCards?: UserCreditCard[] | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}