// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Users.Service.Managment.Persistence;

namespace Users.Service.Managment.Persistence.Migrations
{
    [DbContext(typeof(UserDBContext))]
    [Migration("20191105105830_CreateUserDb")]
    partial class CreateUserDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.DefaultMarkupPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MarkupPlanId")
                        .HasColumnType("int");

                    b.Property<byte>("Module")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("MarkupPlanId");

                    b.ToTable("DefaultMarkupPlans");
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.DefaultPointsRedeemPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Module")
                        .HasColumnType("tinyint");

                    b.Property<int>("PointsRedeemPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PointsRedeemPlanId");

                    b.ToTable("DefaultPointsRedeemPlans");
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.MarkupPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUseCoupon")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Markup")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MarkupPlans");
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.PointsRedeemPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PointsRedeemPlans");
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("CanUseCoupon")
                        .HasColumnType("bit");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DisplayMarkup")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalLoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.UserCreditCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardDisplayNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCreditCards");
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.UserMarkupPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MarkupPlanId")
                        .HasColumnType("int");

                    b.Property<byte>("Module")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MarkupPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMarkupPlans");
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.UserPointsRedeemPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Module")
                        .HasColumnType("tinyint");

                    b.Property<int>("PointsRedeemPlanId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PointsRedeemPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPointsRedeemPlans");
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.DefaultMarkupPlan", b =>
                {
                    b.HasOne("Users.Service.Managment.Domain.Entities.MarkupPlan", "MarkupPlan")
                        .WithMany("DefaultMarkupPlans")
                        .HasForeignKey("MarkupPlanId")
                        .HasConstraintName("FK_DefaultMarkupPlan_MarkupPlan_MarkupPlanId")
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.DefaultPointsRedeemPlan", b =>
                {
                    b.HasOne("Users.Service.Managment.Domain.Entities.PointsRedeemPlan", "PointsRedeemPlan")
                        .WithMany("DefaultPointsRedeemPlans")
                        .HasForeignKey("PointsRedeemPlanId")
                        .HasConstraintName("FK_DefaultPointsRedeemPlan_PointsRedeemPlan_PointsRedeemPlanId")
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.User", b =>
                {
                    b.HasOne("Users.Service.Managment.Domain.Entities.User", "ParentUser")
                        .WithMany("SubUsers")
                        .HasForeignKey("ParentUserId")
                        .HasConstraintName("FK_User_User_ParentUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.UserCreditCard", b =>
                {
                    b.HasOne("Users.Service.Managment.Domain.Entities.User", "User")
                        .WithMany("UserCreditCards")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserCreditCard_User_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.UserMarkupPlan", b =>
                {
                    b.HasOne("Users.Service.Managment.Domain.Entities.MarkupPlan", "MarkupPlan")
                        .WithMany("UserMarkupPlans")
                        .HasForeignKey("MarkupPlanId")
                        .HasConstraintName("FK_UserMarkupPlan_MarkupPlan_MarkupPlanId")
                        .IsRequired();

                    b.HasOne("Users.Service.Managment.Domain.Entities.User", "User")
                        .WithMany("UserMarkupPlans")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserMarkupPlan_User_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Service.Managment.Domain.Entities.UserPointsRedeemPlan", b =>
                {
                    b.HasOne("Users.Service.Managment.Domain.Entities.PointsRedeemPlan", "PointsRedeemPlan")
                        .WithMany("UserPointsRedeemPlans")
                        .HasForeignKey("PointsRedeemPlanId")
                        .HasConstraintName("FK_Points_Redeem_Plans")
                        .IsRequired();

                    b.HasOne("Users.Service.Managment.Domain.Entities.User", "User")
                        .WithMany("UserPointsRedeemPlans")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_Points_Redeem_Plans")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
